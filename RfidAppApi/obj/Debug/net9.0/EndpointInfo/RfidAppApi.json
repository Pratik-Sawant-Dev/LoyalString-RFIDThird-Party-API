{
  "x-generator": "NSwag v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "RFID Jewelry Inventory System API",
    "description": "Multi-tenant RFID Jewelry Inventory Management System API",
    "version": "v1"
  },
  "paths": {
    "/api/Product/create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new product with user-friendly inputs\nUsers can simply enter text values like \"Gold\", \"Pune\", \"Counter1\" instead of knowing IDs",
        "operationId": "Product_CreateProduct",
        "requestBody": {
          "x-name": "createDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFriendlyCreateProductDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/bulk-create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create multiple products in bulk with user-friendly inputs",
        "operationId": "Product_CreateBulkProducts",
        "requestBody": {
          "x-name": "bulkDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateProductsDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a product by ID with user-friendly response",
        "operationId": "Product_GetProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update a product with user-friendly inputs\nUsers can update master data using text values instead of IDs",
        "operationId": "Product_UpdateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "updateDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFriendlyUpdateProductDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product by ID",
        "operationId": "Product_DeleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/all": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all products with user-friendly response",
        "operationId": "Product_GetAllProducts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/search": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Search products by various criteria",
        "operationId": "Product_SearchProducts",
        "parameters": [
          {
            "name": "categoryName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "branchName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "counterName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "productName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "designName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "purityName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "decimal",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "decimal",
              "nullable": true
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Product/stats": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product statistics",
        "operationId": "Product_GetProductStats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Rfid": {
      "get": {
        "tags": [
          "Rfid"
        ],
        "summary": "Get all RFID tags for the authenticated client",
        "operationId": "Rfid_GetAllRfids",
        "responses": {
          "200": {
            "description": "RFID tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfidDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Rfid"
        ],
        "summary": "Create a new RFID tag for the authenticated client",
        "operationId": "Rfid_CreateRfid",
        "requestBody": {
          "x-name": "createRfidDto",
          "description": "RFID tag creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRfidDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "RFID tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfidDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/Rfid/{rfidCode}": {
      "get": {
        "tags": [
          "Rfid"
        ],
        "summary": "Get RFID tag by code for the authenticated client",
        "operationId": "Rfid_GetRfidByCode",
        "parameters": [
          {
            "name": "rfidCode",
            "in": "path",
            "required": true,
            "description": "RFID tag code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "RFID tag found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfidDto"
                }
              }
            }
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "RFID tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Rfid"
        ],
        "summary": "Update an existing RFID tag for the authenticated client",
        "operationId": "Rfid_UpdateRfid",
        "parameters": [
          {
            "name": "rfidCode",
            "in": "path",
            "required": true,
            "description": "RFID tag code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "updateRfidDto",
          "description": "Updated RFID tag information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRfidDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "RFID tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RfidDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "RFID tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Rfid"
        ],
        "summary": "Delete an RFID tag for the authenticated client",
        "operationId": "Rfid_DeleteRfid",
        "parameters": [
          {
            "name": "rfidCode",
            "in": "path",
            "required": true,
            "description": "RFID tag code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "RFID tag deleted successfully"
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "RFID tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/Rfid/available": {
      "get": {
        "tags": [
          "Rfid"
        ],
        "summary": "Get available RFID tags (not assigned to any product) for the authenticated client",
        "operationId": "Rfid_GetAvailableRfids",
        "responses": {
          "200": {
            "description": "Available RFID tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfidDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/Rfid/active": {
      "get": {
        "tags": [
          "Rfid"
        ],
        "summary": "Get active RFID tags for the authenticated client",
        "operationId": "Rfid_GetActiveRfids",
        "responses": {
          "200": {
            "description": "Active RFID tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RfidDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/Rfid/count": {
      "get": {
        "tags": [
          "Rfid"
        ],
        "summary": "Get RFID count for the authenticated client",
        "operationId": "Rfid_GetRfidCount",
        "responses": {
          "200": {
            "description": "RFID count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Client code not found in token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a new client organization with automatic database creation",
        "operationId": "User_Register",
        "requestBody": {
          "x-name": "createUserDto",
          "description": "User registration details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Authenticate user and get JWT token",
        "operationId": "User_Login",
        "requestBody": {
          "x-name": "loginDto",
          "description": "Login credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by ID",
        "operationId": "User_GetUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user information",
        "operationId": "User_UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "updateUserDto",
          "description": "Updated user information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user (soft delete - sets IsActive to false)",
        "operationId": "User_DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User/by-email/{email}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by email address",
        "operationId": "User_GetUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "Email address",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User/by-client-code/{clientCode}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by client code",
        "operationId": "User_GetUserByClientCode",
        "parameters": [
          {
            "name": "clientCode",
            "in": "path",
            "required": true,
            "description": "Client code (e.g., LS0001)",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all active users",
        "operationId": "User_GetAllUsers",
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserFriendlyCreateProductDto": {
        "type": "object",
        "description": "User-friendly DTO for creating products with text-based master data\nUsers can simply enter text values like \"Gold\", \"Pune\", \"Counter1\" instead of knowing IDs",
        "additionalProperties": false,
        "properties": {
          "itemCode": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "counterName": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "designName": {
            "type": "string"
          },
          "purityName": {
            "type": "string"
          },
          "rfidCode": {
            "type": "string",
            "nullable": true
          },
          "grossWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "stoneWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "diamondHeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "boxDetails": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stoneAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "diamondAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "hallmarkAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingPerGram": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingFixedAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "mrp": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BulkCreateProductsDto": {
        "type": "object",
        "description": "DTO for bulk product creation with user-friendly inputs",
        "additionalProperties": false,
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFriendlyCreateProductDto"
            }
          }
        }
      },
      "UserFriendlyUpdateProductDto": {
        "type": "object",
        "description": "User-friendly DTO for updating products",
        "additionalProperties": false,
        "properties": {
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "branchName": {
            "type": "string",
            "nullable": true
          },
          "counterName": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "designName": {
            "type": "string",
            "nullable": true
          },
          "purityName": {
            "type": "string",
            "nullable": true
          },
          "rfidCode": {
            "type": "string",
            "nullable": true
          },
          "grossWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "stoneWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "diamondHeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "netWeight": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "boxDetails": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stoneAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "diamondAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "hallmarkAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingPerGram": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingPercentage": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "makingFixedAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "mrp": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RfidDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "rfidCode": {
            "type": "string"
          },
          "epcValue": {
            "type": "string"
          },
          "clientCode": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateRfidDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "rfidCode": {
            "type": "string"
          },
          "epcValue": {
            "type": "string"
          },
          "clientCode": {
            "type": "string"
          }
        }
      },
      "UpdateRfidDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "epcValue": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UserDto": {
        "type": "object",
        "description": "User data transfer object for API responses",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "Username for login"
          },
          "email": {
            "type": "string",
            "description": "Email address (unique)"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "description": "Fax number",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City where the user is located",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Physical address",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "description": "Organization/company name"
          },
          "showroomType": {
            "type": "string",
            "description": "Type of showroom (e.g., Premium, Standard)",
            "nullable": true
          },
          "clientCode": {
            "type": "string",
            "description": "Unique client code (e.g., LS0001)"
          },
          "databaseName": {
            "type": "string",
            "description": "Database name for the client",
            "nullable": true
          },
          "connectionString": {
            "type": "string",
            "description": "Connection string for the client database",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the user is active"
          },
          "createdOn": {
            "type": "string",
            "description": "When the user was created",
            "format": "date-time"
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "description": "Data transfer object for creating a new user",
        "additionalProperties": false,
        "properties": {
          "userName": {
            "type": "string",
            "description": "Username for login (required)"
          },
          "email": {
            "type": "string",
            "description": "Email address (required, unique)"
          },
          "password": {
            "type": "string",
            "description": "Password (required)"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "description": "Fax number",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City where the user is located",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Physical address",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "description": "Organization/company name (required)"
          },
          "showroomType": {
            "type": "string",
            "description": "Type of showroom (e.g., Premium, Standard)",
            "nullable": true
          }
        }
      },
      "LoginResponseDto": {
        "type": "object",
        "description": "Data transfer object for login response",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token"
          },
          "user": {
            "description": "User information",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserDto"
              }
            ]
          },
          "expiresAt": {
            "type": "string",
            "description": "When the token expires",
            "format": "date-time"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "description": "Data transfer object for user login",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address (required)"
          },
          "password": {
            "type": "string",
            "description": "Password (required)"
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "description": "Data transfer object for updating user information",
        "additionalProperties": false,
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "description": "Fax number",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City where the user is located",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Physical address",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "description": "Organization/company name",
            "nullable": true
          },
          "showroomType": {
            "type": "string",
            "description": "Type of showroom (e.g., Premium, Standard)",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the user is active",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header",
        "scheme": "Bearer"
      }
    }
  }
}