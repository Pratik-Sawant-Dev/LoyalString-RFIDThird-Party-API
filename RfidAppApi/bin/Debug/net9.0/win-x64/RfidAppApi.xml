<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RfidAppApi</name>
    </assembly>
    <members>
        <member name="T:RfidAppApi.Controllers.AdminController">
            <summary>
            Admin controller for user management and activity tracking
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.RegisterAdmin(RfidAppApi.DTOs.CreateUserByAdminDto)">
            <summary>
            Register a new admin user (Main Admin only)
            </summary>
            <param name="createUserDto">Admin user creation details</param>
            <returns>Created admin user information</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.RegisterSubUser(RfidAppApi.DTOs.CreateUserByAdminDto)">
            <summary>
            Register a new sub-user under admin
            </summary>
            <param name="createUserDto">Sub-user creation details</param>
            <returns>Created sub-user information</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUser(System.Int32)">
            <summary>
            Get user by ID
            </summary>
            <param name="userId">User ID</param>
            <returns>User information</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUsersUnderAdmin(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Get all users managed by the current admin
            </summary>
            <returns>List of users</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.UpdateUser(System.Int32,RfidAppApi.DTOs.UpdateUserByAdminDto)">
            <summary>
            Update user information (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <param name="updateUserDto">Update information</param>
            <returns>Updated user information</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.DeleteUser(System.Int32)">
            <summary>
            Delete user (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.ActivateUser(RfidAppApi.Controllers.ActivateUserDto)">
            <summary>
            Activate user (Admin only)
            </summary>
            <param name="activateUserDto">Activation details</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.DeactivateUser(RfidAppApi.Controllers.DeactivateUserDto)">
            <summary>
            Deactivate user (Admin only)
            </summary>
            <param name="deactivateUserDto">Deactivation details</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.ResetUserPassword(System.Int32,RfidAppApi.Controllers.ResetPasswordDto)">
            <summary>
            Reset user password (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <param name="resetPasswordDto">New password</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.AssignPermissions(RfidAppApi.Controllers.AssignPermissionsDto)">
            <summary>
            Assign permissions to user
            </summary>
            <param name="assignPermissionsDto">Permission assignment details</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.UpdatePermissions(RfidAppApi.Controllers.UpdatePermissionsDto)">
            <summary>
            Update user permissions (Admin only)
            </summary>
            <param name="updatePermissionsDto">Permission update details</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserPermissions(System.Int32)">
            <summary>
            Get user permissions
            </summary>
            <param name="userId">User ID</param>
            <returns>User permissions</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetAllUserPermissions">
            <summary>
            Get all user permissions
            </summary>
            <returns>All user permissions</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.UpdateUserPermissions(System.Int32,System.Collections.Generic.List{RfidAppApi.DTOs.UserPermissionCreateDto})">
            <summary>
            Update user permissions (Admin only)
            </summary>
            <param name="userId">User ID</param>
            <param name="permissions">New permissions</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.BulkUpdatePermissions(RfidAppApi.DTOs.BulkPermissionUpdateDto)">
            <summary>
            Bulk update permissions for multiple users (Admin only)
            </summary>
            <param name="bulkUpdate">Bulk permission update details</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivities(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get user activities with filters
            </summary>
            <param name="filter">Activity filter parameters</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivitiesByUser(System.Int32)">
            <summary>
            Get activities for a specific user
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivitiesByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get user activities by date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivitiesByModule(System.String)">
            <summary>
            Get user activities by module
            </summary>
            <param name="module">Module name</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivitiesByAction(System.String)">
            <summary>
            Get user activities by action
            </summary>
            <param name="action">Action name</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserActivities(System.Int32,RfidAppApi.DTOs.ActivityFilterDto)">
            <summary>
            Get activities for a specific user
            </summary>
            <param name="userId">User ID</param>
            <param name="filter">Activity filter parameters</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetActivitySummary">
            <summary>
            Get activity summary
            </summary>
            <returns>Activity summary</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetActivitySummaryByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get activity summary by date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>Activity summary</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetActivitySummaryByUser(System.Int32)">
            <summary>
            Get activity summary by user
            </summary>
            <param name="userId">User ID</param>
            <returns>Activity summary</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetActivitySummaryByModule(System.String)">
            <summary>
            Get activity summary by module
            </summary>
            <param name="module">Module name</param>
            <returns>Activity summary</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserHierarchy">
            <summary>
            Get user hierarchy
            </summary>
            <returns>User hierarchy</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetUserHierarchyByAdmin(System.Int32)">
            <summary>
            Get user hierarchy by admin
            </summary>
            <param name="adminUserId">Admin user ID</param>
            <returns>User hierarchy</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.ExportActivitiesToCsv(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            Export user activities to CSV
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="userId">User ID (optional)</param>
            <param name="module">Module (optional)</param>
            <returns>CSV file</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.ExportPermissionsToCsv">
            <summary>
            Export user permissions to CSV
            </summary>
            <returns>CSV file</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetDashboard">
            <summary>
            Get admin dashboard with statistics and recent activities
            </summary>
            <returns>Admin dashboard data</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetOrganizationDashboard">
            <summary>
            Get organization dashboard (Main Admin only)
            </summary>
            <returns>Organization dashboard data</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.AdminController.GetOrganizationUsers">
            <summary>
            Get all users in organization (Main Admin only)
            </summary>
            <returns>List of all users in organization</returns>
        </member>
        <member name="T:RfidAppApi.Controllers.ResetPasswordDto">
            <summary>
            DTO for password reset
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.ActivateUserDto">
            <summary>
            DTO for activating user
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.DeactivateUserDto">
            <summary>
            DTO for deactivating user
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.AssignPermissionsDto">
            <summary>
            DTO for assigning permissions
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.UpdatePermissionsDto">
            <summary>
            DTO for updating permissions
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.DatabaseMigrationController">
            <summary>
            Controller for database migration and health monitoring
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.GetDatabaseHealth">
            <summary>
            Get database health status for all clients
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.GetClientDatabaseHealth(System.String)">
            <summary>
            Get database health status for a specific client
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.MigrateClientDatabase(System.String)">
            <summary>
            Migrate a specific client database
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.MigrateAllClientDatabases">
            <summary>
            Migrate all client databases
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.RepairClientDatabase(System.String)">
            <summary>
            Force repair a specific client database
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.GetMigrationStatistics">
            <summary>
            Get migration statistics
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.EmergencyRepairAllDatabases">
            <summary>
            Emergency database repair for all clients
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.TestTableCreation(System.String)">
            <summary>
            Test endpoint to verify table creation for a specific client
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.DatabaseMigrationController.ForceCreateMissingTables(System.String)">
            <summary>
            Force create missing tables for a specific client
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.InvoiceController">
            <summary>
            Controller for comprehensive invoice management functionality
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.CreateInvoice(RfidAppApi.DTOs.CreateInvoiceDto)">
            <summary>
            Create a new invoice
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoiceById(System.Int32)">
            <summary>
            Get invoice by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetAllInvoices(System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
            Get all invoices with pagination and filtering
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.UpdateInvoice(System.Int32,RfidAppApi.DTOs.UpdateInvoiceDto)">
            <summary>
            Update an existing invoice
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.DeleteInvoice(System.Int32)">
            <summary>
            Delete an invoice (soft delete)
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoicesByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get invoices by date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoicesByProduct(System.Int32)">
            <summary>
            Get invoices by product ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoicesByCustomer(System.String)">
            <summary>
            Get invoices by customer name (partial match)
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoicesByPaymentMethod(System.String)">
            <summary>
            Get invoices by payment method
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetInvoiceStatistics">
            <summary>
            Get comprehensive invoice statistics
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetRevenueAnalytics(System.DateTime,System.DateTime,System.String)">
            <summary>
            Get revenue analytics by date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.GetTopProducts(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get top performing products by revenue
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.CreateBulkInvoices(RfidAppApi.Controllers.BulkCreateInvoiceDto)">
            <summary>
            Create multiple invoices in bulk
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.InvoiceController.ExportInvoicesToCsv(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Export invoices to CSV format
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.PaginatedInvoiceResponseDto">
            <summary>
            DTO for paginated invoice response
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.PaginationInfoDto">
            <summary>
            DTO for pagination information
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.BulkCreateInvoiceDto">
            <summary>
            DTO for bulk invoice creation
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.BulkInvoiceResponseDto">
            <summary>
            DTO for bulk invoice response
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.RevenueAnalyticsDto">
            <summary>
            DTO for revenue analytics
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.RevenuePeriodDto">
            <summary>
            DTO for revenue period
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.TopProductDto">
            <summary>
            DTO for top performing products
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllCategories">
            <summary>
            Get all categories
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetCategoryById(System.Int32)">
            <summary>
            Get category by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateCategory(RfidAppApi.DTOs.CreateCategoryMasterDto)">
            <summary>
            Create new category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateCategory(RfidAppApi.DTOs.UpdateCategoryMasterDto)">
            <summary>
            Update category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteCategory(System.Int32)">
            <summary>
            Delete category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllPurities">
            <summary>
            Get all purities
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetPurityById(System.Int32)">
            <summary>
            Get purity by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreatePurity(RfidAppApi.DTOs.CreatePurityMasterDto)">
            <summary>
            Create new purity
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdatePurity(RfidAppApi.DTOs.UpdatePurityMasterDto)">
            <summary>
            Update purity
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeletePurity(System.Int32)">
            <summary>
            Delete purity
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllDesigns">
            <summary>
            Get all designs
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetDesignById(System.Int32)">
            <summary>
            Get design by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateDesign(RfidAppApi.DTOs.CreateDesignMasterDto)">
            <summary>
            Create new design
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateDesign(RfidAppApi.DTOs.UpdateDesignMasterDto)">
            <summary>
            Update design
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteDesign(System.Int32)">
            <summary>
            Delete design
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllBoxes">
            <summary>
            Get all boxes
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetActiveBoxes">
            <summary>
            Get active boxes only
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetBoxesByType(System.String)">
            <summary>
            Get boxes by type
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetBoxById(System.Int32)">
            <summary>
            Get box by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateBox(RfidAppApi.DTOs.CreateBoxMasterDto)">
            <summary>
            Create new box
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateBox(RfidAppApi.DTOs.UpdateBoxMasterDto)">
            <summary>
            Update box
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteBox(System.Int32)">
            <summary>
            Delete box
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllCounters">
            <summary>
            Get all counters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetCountersByClient(System.String)">
            <summary>
            Get counters by client
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetCountersByBranch(System.Int32)">
            <summary>
            Get counters by branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetCounterById(System.Int32)">
            <summary>
            Get counter by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateCounter(RfidAppApi.DTOs.CreateCounterMasterDto)">
            <summary>
            Create new counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateCounter(RfidAppApi.DTOs.UpdateCounterMasterDto)">
            <summary>
            Update counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteCounter(System.Int32)">
            <summary>
            Delete counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllBranches">
            <summary>
            Get all branches
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetBranchesByClient(System.String)">
            <summary>
            Get branches by client
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetBranchById(System.Int32)">
            <summary>
            Get branch by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateBranch(RfidAppApi.DTOs.CreateBranchMasterDto)">
            <summary>
            Create new branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateBranch(RfidAppApi.DTOs.UpdateBranchMasterDto)">
            <summary>
            Update branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteBranch(System.Int32)">
            <summary>
            Delete branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetAllProducts">
            <summary>
            Get all products
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetProductById(System.Int32)">
            <summary>
            Get product by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.CreateProduct(RfidAppApi.DTOs.CreateProductMasterDto)">
            <summary>
            Create new product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.UpdateProduct(RfidAppApi.DTOs.UpdateProductMasterDto)">
            <summary>
            Update product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.DeleteProduct(System.Int32)">
            <summary>
            Delete product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetMasterDataSummary">
            <summary>
            Get master data summary
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetMasterDataCounts">
            <summary>
            Get master data counts
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.MasterDataController.GetMasterDataSummaryByClient(System.String)">
            <summary>
            Get master data summary by client
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.CreateProduct(RfidAppApi.DTOs.UserFriendlyCreateProductDto)">
            <summary>
            Create a new product with user-friendly inputs
            Users can simply enter text values like "Gold", "Pune", "Counter1" instead of knowing IDs
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.CreateBulkProducts(RfidAppApi.DTOs.BulkCreateProductsDto)">
            <summary>
            Create multiple products in bulk with user-friendly inputs
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.CreateProductWithImages(RfidAppApi.DTOs.UserFriendlyCreateProductWithImagesDto,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Create a new product with images
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.GetProduct(System.Int32)">
            <summary>
            Get a product by ID with user-friendly response
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.GetAllProducts">
            <summary>
            Get all products with user-friendly response
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.UpdateProduct(System.Int32,RfidAppApi.DTOs.UserFriendlyUpdateProductDto)">
            <summary>
            Update a product with user-friendly inputs
            Users can update master data using text values instead of IDs
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.UpdateProductWithImages(System.Int32,RfidAppApi.DTOs.UserFriendlyUpdateProductWithImagesDto,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Update a product with images
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.DeleteProduct(System.Int32)">
            <summary>
            Delete a product by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.SearchProducts(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Search products by various criteria
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.GetProductStats">
            <summary>
            Get product statistics
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductController.GetProductImage(System.String)">
            <summary>
            Serve product image by file path
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.UploadImage(Microsoft.AspNetCore.Http.IFormFile,RfidAppApi.DTOs.ProductImageUploadDto)">
            <summary>
            Upload a single image for a product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.UploadMultipleImages(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},System.String)">
            <summary>
            Upload multiple images for products
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.GetImage(System.Int32)">
            <summary>
            Get a specific image by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.GetProductImages(System.Int32)">
            <summary>
            Get all images for a specific product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.UpdateImage(System.Int32,RfidAppApi.DTOs.ProductImageUpdateDto)">
            <summary>
            Update image metadata
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.DeleteImage(System.Int32)">
            <summary>
            Delete a specific image
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.DeleteProductImages(System.Int32)">
            <summary>
            Delete all images for a specific product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.BulkUpdateImages(RfidAppApi.DTOs.BulkImageOperationDto)">
            <summary>
            Bulk update images
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.BulkDeleteImages(System.Collections.Generic.List{System.Int32})">
            <summary>
            Bulk delete images
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ProductImageController.ValidateImage(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validate image file
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.ReportingController">
            <summary>
            Controller for comprehensive reporting functionality
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.CreateStockMovement(RfidAppApi.DTOs.CreateStockMovementDto)">
            <summary>
            Create a new stock movement
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.CreateBulkStockMovements(RfidAppApi.DTOs.BulkStockMovementDto)">
            <summary>
            Create multiple stock movements in bulk
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockMovements(RfidAppApi.DTOs.ReportFilterDto)">
            <summary>
            Get stock movements with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockMovementById(System.Int32)">
            <summary>
            Get stock movement by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyStockBalance(System.Int32,System.DateTime)">
            <summary>
            Get daily stock balance for a specific product and date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyStockBalances(RfidAppApi.DTOs.ReportFilterDto)">
            <summary>
            Get daily stock balances with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.CalculateDailyStockBalance(System.Int32,System.DateTime)">
            <summary>
            Calculate daily stock balance for a specific product and date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.CalculateDailyStockBalances(System.DateTime)">
            <summary>
            Calculate daily stock balances for all products on a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReport(RfidAppApi.DTOs.ReportFilterDto)">
            <summary>
            Get sales report with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReportByDate(System.DateTime)">
            <summary>
            Get sales report for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReportByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get sales report for a date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReportByBranch(System.Int32,System.DateTime)">
            <summary>
            Get sales report for a specific branch on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReportByCounter(System.Int32,System.DateTime)">
            <summary>
            Get sales report for a specific counter on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetSalesReportByCategory(System.Int32,System.DateTime)">
            <summary>
            Get sales report for a specific category on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockSummaryReport(RfidAppApi.DTOs.ReportFilterDto)">
            <summary>
            Get stock summary report with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockSummaryByDate(System.DateTime)">
            <summary>
            Get stock summary for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockSummaryByBranch(System.Int32,System.DateTime)">
            <summary>
            Get stock summary for a specific branch on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockSummaryByCounter(System.Int32,System.DateTime)">
            <summary>
            Get stock summary for a specific counter on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetStockSummaryByCategory(System.Int32,System.DateTime)">
            <summary>
            Get stock summary for a specific category on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyActivityReport(RfidAppApi.DTOs.ReportFilterDto)">
            <summary>
            Get daily activity report with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyActivityByDate(System.DateTime)">
            <summary>
            Get daily activity for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyActivityByBranch(System.Int32,System.DateTime)">
            <summary>
            Get daily activity for a specific branch on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyActivityByCounter(System.Int32,System.DateTime)">
            <summary>
            Get daily activity for a specific counter on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetDailyActivityByCategory(System.Int32,System.DateTime)">
            <summary>
            Get daily activity for a specific category on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetReportSummary(System.DateTime)">
            <summary>
            Get report summary for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetReportSummaryByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get report summary for a date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetReportSummaryByBranch(System.Int32,System.DateTime)">
            <summary>
            Get report summary for a specific branch on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetReportSummaryByCounter(System.Int32,System.DateTime)">
            <summary>
            Get report summary for a specific counter on a date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStock(System.Int32)">
            <summary>
            Get current stock for a specific product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockByBranch(System.Int32,System.Int32)">
            <summary>
            Get current stock for a specific product by branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockByCounter(System.Int32,System.Int32)">
            <summary>
            Get current stock for a specific product by counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockByCategory(System.Int32)">
            <summary>
            Get current stock for a specific category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockValue(System.Int32)">
            <summary>
            Get current stock value for a specific product
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockValueByBranch(System.Int32,System.Int32)">
            <summary>
            Get current stock value for a specific product by branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockValueByCounter(System.Int32,System.Int32)">
            <summary>
            Get current stock value for a specific product by counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetCurrentStockValueByCategory(System.Int32)">
            <summary>
            Get current stock value for a specific category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.ProcessDailyStockBalances(System.DateTime)">
            <summary>
            Process daily stock balances for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.ProcessAllDailyStockBalances(System.DateTime,System.DateTime)">
            <summary>
            Process daily stock balances for a date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.RecalculateStockBalances(System.DateTime,System.DateTime)">
            <summary>
            Recalculate stock balances for a date range
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageReport">
            <summary>
            Get comprehensive RFID usage report
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageReportByDate(System.DateTime)">
            <summary>
            Get RFID usage report for a specific date
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetUsedRfidTags">
            <summary>
            Get all used RFID tags
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetUnusedRfidTags">
            <summary>
            Get all unused RFID tags
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidTagsByStatus(System.Boolean)">
            <summary>
            Get RFID tags by usage status
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByCategory">
            <summary>
            Get RFID usage summary by category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByBranch">
            <summary>
            Get RFID usage summary by branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByCounter">
            <summary>
            Get RFID usage summary by counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByCategoryId(System.Int32)">
            <summary>
            Get RFID usage summary for a specific category
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByBranchId(System.Int32)">
            <summary>
            Get RFID usage summary for a specific branch
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsageByCounterId(System.Int32)">
            <summary>
            Get RFID usage summary for a specific counter
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetTotalRfidTagsCount">
            <summary>
            Get total count of RFID tags
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetUsedRfidTagsCount">
            <summary>
            Get count of used RFID tags
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetUnusedRfidTagsCount">
            <summary>
            Get count of unused RFID tags
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.ReportingController.GetRfidUsagePercentage">
            <summary>
            Get RFID usage percentage
            </summary>
        </member>
        <member name="T:RfidAppApi.Controllers.RfidController">
            <summary>
            RFID management controller for handling RFID tag operations
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetAllRfids">
            <summary>
            Get all RFID tags for the authenticated client
            </summary>
            <returns>List of all RFID tags for the client</returns>
            <response code="200">RFID tags retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetRfidByCode(System.String)">
            <summary>
            Get RFID tag by code for the authenticated client
            </summary>
            <param name="rfidCode">RFID tag code</param>
            <returns>RFID tag information</returns>
            <response code="200">RFID tag found</response>
            <response code="400">Client code not found in token</response>
            <response code="404">RFID tag not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.CreateRfid(RfidAppApi.DTOs.CreateRfidDto)">
            <summary>
            Create a new RFID tag for the authenticated client
            </summary>
            <param name="createRfidDto">RFID tag creation details</param>
            <returns>Created RFID tag information</returns>
            <response code="201">RFID tag created successfully</response>
            <response code="400">Invalid input or client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.UpdateRfid(System.String,RfidAppApi.DTOs.UpdateRfidDto)">
            <summary>
            Update an existing RFID tag for the authenticated client
            </summary>
            <param name="rfidCode">RFID tag code</param>
            <param name="updateRfidDto">Updated RFID tag information</param>
            <returns>Updated RFID tag information</returns>
            <response code="200">RFID tag updated successfully</response>
            <response code="400">Invalid input or client code not found in token</response>
            <response code="404">RFID tag not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.DeleteRfid(System.String)">
            <summary>
            Delete an RFID tag for the authenticated client
            </summary>
            <param name="rfidCode">RFID tag code</param>
            <returns>No content</returns>
            <response code="204">RFID tag deleted successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="404">RFID tag not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetAvailableRfids">
            <summary>
            Get available RFID tags (not assigned to any product) for the authenticated client
            </summary>
            <returns>List of available RFID tags</returns>
            <response code="200">Available RFID tags retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetActiveRfids">
            <summary>
            Get active RFID tags for the authenticated client
            </summary>
            <returns>List of active RFID tags</returns>
            <response code="200">Active RFID tags retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetRfidCount">
            <summary>
            Get RFID count for the authenticated client
            </summary>
            <returns>Total count of RFID tags</returns>
            <response code="200">RFID count retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetUsedRfidAnalysis">
            <summary>
            Get detailed analysis of used RFID tags (assigned to products) for the authenticated client
            </summary>
            <returns>Used RFID analysis with count and detailed information</returns>
            <response code="200">Used RFID analysis retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.GetUnusedRfidAnalysis">
            <summary>
            Get detailed analysis of unused RFID tags (not assigned to products) for the authenticated client
            </summary>
            <returns>Unused RFID analysis with count and detailed information</returns>
            <response code="200">Unused RFID analysis retrieved successfully</response>
            <response code="400">Client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.ScanProductsByEpcValue(RfidAppApi.DTOs.RfidScanRequestDto)">
            <summary>
            Scan for products by EPC value - returns all products associated with the scanned EPC value(s)
            </summary>
            <param name="request">Scan request containing single EPC value or multiple EPC values</param>
            <returns>Scan response with all associated products grouped by EPC value</returns>
            <response code="200">Scan completed successfully</response>
            <response code="400">Invalid request or client code not found in token</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.UploadRfidFromExcel(RfidAppApi.DTOs.RfidExcelUploadDto)">
            <summary>
            Upload RFID data from Excel file
            </summary>
            <param name="uploadDto">Excel upload request with file and options</param>
            <returns>Upload processing results</returns>
            <response code="200">Excel upload processed successfully</response>
            <response code="400">Invalid request or validation errors</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.RfidController.DownloadExcelTemplate">
            <summary>
            Download Excel template for RFID upload
            </summary>
            <returns>Excel template file</returns>
            <response code="200">Template downloaded successfully</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:RfidAppApi.Controllers.StockTransferController">
            <summary>
            Controller for managing stock transfers between branches, counters, and boxes
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.CreateTransfer(RfidAppApi.DTOs.CreateStockTransferDto)">
            <summary>
            Create a new stock transfer
            </summary>
            <param name="createDto">Transfer creation details</param>
            <returns>Created transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.CreateBulkTransfers(RfidAppApi.DTOs.BulkStockTransferDto)">
            <summary>
            Create multiple stock transfers in bulk
            </summary>
            <param name="bulkDto">Bulk transfer details</param>
            <returns>Bulk transfer results</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransfer(System.Int32)">
            <summary>
            Get a specific transfer by ID
            </summary>
            <param name="transferId">Transfer ID</param>
            <returns>Transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransfers(RfidAppApi.DTOs.TransferFilterDto)">
            <summary>
            Get all transfers with optional filtering
            </summary>
            <param name="filter">Filter criteria</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.UpdateTransferStatus(System.Int32,RfidAppApi.DTOs.UpdateTransferStatusDto)">
            <summary>
            Update transfer status
            </summary>
            <param name="transferId">Transfer ID</param>
            <param name="updateDto">Status update details</param>
            <returns>Updated transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.ApproveTransfer(System.Int32,RfidAppApi.DTOs.ApproveTransferDto)">
            <summary>
            Approve a transfer
            </summary>
            <param name="transferId">Transfer ID</param>
            <param name="approveDto">Approval details</param>
            <returns>Approved transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.RejectTransfer(System.Int32,RfidAppApi.DTOs.RejectTransferDto)">
            <summary>
            Reject a transfer
            </summary>
            <param name="transferId">Transfer ID</param>
            <param name="rejectDto">Rejection details</param>
            <returns>Rejected transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.CompleteTransfer(System.Int32,System.String)">
            <summary>
            Complete a transfer (move product to destination)
            </summary>
            <param name="transferId">Transfer ID</param>
            <param name="completedBy">User who completed the transfer</param>
            <returns>Completed transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.CancelTransfer(System.Int32,System.String)">
            <summary>
            Cancel a transfer
            </summary>
            <param name="transferId">Transfer ID</param>
            <param name="cancelledBy">User who cancelled the transfer</param>
            <returns>Cancelled transfer details</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransferSummary(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get transfer summary and statistics
            </summary>
            <param name="fromDate">Start date for summary</param>
            <param name="toDate">End date for summary</param>
            <returns>Transfer summary</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransfersByProduct(System.Int32)">
            <summary>
            Get transfers by product
            </summary>
            <param name="productId">Product ID</param>
            <returns>List of transfers for the product</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransfersByRfid(System.String)">
            <summary>
            Get transfers by RFID
            </summary>
            <param name="rfidCode">RFID code</param>
            <returns>List of transfers for the RFID</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetPendingTransfersByLocation(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get pending transfers for a specific location
            </summary>
            <param name="branchId">Branch ID</param>
            <param name="counterId">Counter ID</param>
            <param name="boxId">Box ID (optional)</param>
            <returns>List of pending transfers</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.ValidateTransfer(RfidAppApi.DTOs.CreateStockTransferDto)">
            <summary>
            Validate if a transfer is possible
            </summary>
            <param name="createDto">Transfer creation details</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetProductTransferHistory(System.Int32)">
            <summary>
            Get transfer history for a product
            </summary>
            <param name="productId">Product ID</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransferTypes">
            <summary>
            Get available transfer types
            </summary>
            <returns>List of transfer types</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetTransferStatuses">
            <summary>
            Get available transfer statuses
            </summary>
            <returns>List of transfer statuses</returns>
        </member>
        <member name="M:RfidAppApi.Controllers.StockTransferController.GetClientCodeFromUser">
            <summary>
            Extract client code from user claims
            </summary>
            <returns>Client code</returns>
        </member>
        <member name="T:RfidAppApi.Controllers.StockVerificationController">
            <summary>
            Controller for managing stock verification sessions and reports
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.CreateStockVerification(RfidAppApi.DTOs.CreateStockVerificationDto)">
            <summary>
            Create a new stock verification session
            </summary>
            <param name="request">Stock verification session details</param>
            <returns>Created verification session</returns>
            <response code="200">Verification session created successfully</response>
            <response code="400">Invalid request or client code not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.SubmitStockVerification(RfidAppApi.DTOs.SubmitStockVerificationDto)">
            <summary>
            Submit scanned items for verification (matched and unmatched)
            </summary>
            <param name="request">Scanned items with verification status</param>
            <returns>Updated verification session</returns>
            <response code="200">Items submitted successfully</response>
            <response code="400">Invalid request or verification session not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.GetStockVerification(System.Int32)">
            <summary>
            Get stock verification session by ID
            </summary>
            <param name="verificationId">Verification session ID</param>
            <returns>Verification session details</returns>
            <response code="200">Verification session retrieved successfully</response>
            <response code="400">Client code not found</response>
            <response code="404">Verification session not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.GetStockVerifications(RfidAppApi.DTOs.StockVerificationReportFilterDto)">
            <summary>
            Get all stock verifications with filters and pagination
            </summary>
            <param name="filter">Filter criteria and pagination</param>
            <returns>Paginated list of verification sessions</returns>
            <response code="200">Verifications retrieved successfully</response>
            <response code="400">Client code not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.GetStockVerificationSummary">
            <summary>
            Get stock verification summary
            </summary>
            <returns>Verification summary statistics</returns>
            <response code="200">Summary retrieved successfully</response>
            <response code="400">Client code not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.GetDateWiseStockVerificationReport(System.DateTime,System.DateTime)">
            <summary>
            Get date-wise stock verification report
            </summary>
            <param name="startDate">Start date for report</param>
            <param name="endDate">End date for report</param>
            <returns>Date-wise verification report</returns>
            <response code="200">Report generated successfully</response>
            <response code="400">Client code not found or invalid date range</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.CompleteStockVerification(System.Int32)">
            <summary>
            Complete a stock verification session
            </summary>
            <param name="verificationId">Verification session ID</param>
            <returns>Completed verification session</returns>
            <response code="200">Verification session completed successfully</response>
            <response code="400">Client code not found or invalid operation</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.CancelStockVerification(System.Int32)">
            <summary>
            Cancel a stock verification session
            </summary>
            <param name="verificationId">Verification session ID</param>
            <returns>Cancelled verification session</returns>
            <response code="200">Verification session cancelled successfully</response>
            <response code="400">Client code not found or invalid operation</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.StockVerificationController.GetVerificationDetailsByStatus(System.Int32,System.String)">
            <summary>
            Get verification details by status (matched, unmatched, missing)
            </summary>
            <param name="verificationId">Verification session ID</param>
            <param name="status">Status filter (Matched, Unmatched, Missing)</param>
            <returns>List of verification details with specified status</returns>
            <response code="200">Details retrieved successfully</response>
            <response code="400">Client code not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:RfidAppApi.Controllers.UserController">
            <summary>
            User management controller for handling user registration, authentication, and management
            </summary>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.Register(RfidAppApi.DTOs.CreateUserDto)">
            <summary>
            Register a new client organization with automatic database creation
            </summary>
            <param name="createUserDto">User registration details</param>
            <returns>Created user information with client code and database details</returns>
            <response code="201">User successfully registered</response>
            <response code="400">Invalid input or email already exists</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.Login(RfidAppApi.DTOs.LoginDto)">
            <summary>
            Authenticate user and get JWT token
            </summary>
            <param name="loginDto">Login credentials</param>
            <returns>JWT token and user information</returns>
            <response code="200">Login successful</response>
            <response code="400">Invalid input</response>
            <response code="401">Invalid credentials</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.Logout">
            <summary>
            Logout user and log the activity
            </summary>
            <returns>Success message</returns>
            <response code="200">Logout successful</response>
            <response code="401">Unauthorized</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.GetUserById(System.Int32)">
            <summary>
            Get user by ID
            </summary>
            <param name="id">User ID</param>
            <returns>User information</returns>
            <response code="200">User found</response>
            <response code="404">User not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.GetUserByEmail(System.String)">
            <summary>
            Get user by email address
            </summary>
            <param name="email">Email address</param>
            <returns>User information</returns>
            <response code="200">User found</response>
            <response code="404">User not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.GetUserByClientCode(System.String)">
            <summary>
            Get user by client code
            </summary>
            <param name="clientCode">Client code (e.g., LS0001)</param>
            <returns>User information</returns>
            <response code="200">User found</response>
            <response code="404">User not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.GetAllUsers">
            <summary>
            Get all active users
            </summary>
            <returns>List of all active users</returns>
            <response code="200">Users retrieved successfully</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.UpdateUser(System.Int32,RfidAppApi.DTOs.UpdateUserDto)">
            <summary>
            Update user information
            </summary>
            <param name="id">User ID</param>
            <param name="updateUserDto">Updated user information</param>
            <returns>Updated user information</returns>
            <response code="200">User updated successfully</response>
            <response code="400">Invalid input</response>
            <response code="404">User not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:RfidAppApi.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
            Delete user (soft delete - sets IsActive to false)
            </summary>
            <param name="id">User ID</param>
            <returns>No content</returns>
            <response code="204">User deleted successfully</response>
            <response code="404">User not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:RfidAppApi.DTOs.AdminUserDto">
            <summary>
            DTO for admin user management
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateUserByAdminDto">
            <summary>
            DTO for creating a new user by admin
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UpdateUserByAdminDto">
            <summary>
            DTO for updating user by admin
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserPermissionDto">
            <summary>
            DTO for user permissions
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserPermissionCreateDto">
            <summary>
            DTO for creating user permissions
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserActivityDto">
            <summary>
            DTO for user activity tracking
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.AdminDashboardDto">
            <summary>
            DTO for admin dashboard statistics
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ActivityFilterDto">
            <summary>
            DTO for activity filter
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkPermissionUpdateDto">
            <summary>
            DTO for bulk user permission update
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ActivitySummaryDto">
            <summary>
            DTO for activity summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ModuleActivitySummary">
            <summary>
            DTO for module activity summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserActivitySummary">
            <summary>
            DTO for user activity summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RecentActivity">
            <summary>
            DTO for recent activity
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserHierarchyDto">
            <summary>
            DTO for user hierarchy
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserHierarchyItem">
            <summary>
            DTO for user hierarchy item
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ProductImageUploadDto">
            <summary>
            DTO for uploading product images
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ProductImageResponseDto">
            <summary>
            DTO for product image response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ProductImageUpdateDto">
            <summary>
            DTO for updating product image
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkImageOperationDto">
            <summary>
            DTO for bulk image operations
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserFriendlyCreateProductWithImagesDto">
            <summary>
            DTO for product creation with images
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserFriendlyUpdateProductWithImagesDto">
            <summary>
            DTO for product update with images
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockMovementDto">
            <summary>
            DTO for stock movement tracking
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.DailyStockBalanceDto">
            <summary>
            DTO for daily stock balance
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.SalesReportDto">
            <summary>
            DTO for sales report
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockSummaryReportDto">
            <summary>
            DTO for stock summary report
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.DailyActivityReportDto">
            <summary>
            DTO for daily activity report
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ReportFilterDto">
            <summary>
            DTO for report filters
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateStockMovementDto">
            <summary>
            DTO for stock movement creation
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkStockMovementDto">
            <summary>
            DTO for bulk stock movement creation
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ReportSummaryDto">
            <summary>
            DTO for report summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidUsageReportDto">
            <summary>
            DTO for RFID usage report
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidUsageDetailDto">
            <summary>
            DTO for RFID usage detail
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidUsageByCategoryDto">
            <summary>
            DTO for RFID usage summary by category
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidUsageByBranchDto">
            <summary>
            DTO for RFID usage summary by branch
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidUsageByCounterDto">
            <summary>
            DTO for RFID usage summary by counter
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UsedRfidAnalysisDto">
            <summary>
            DTO for used RFID tag analysis - includes count and detailed RFID information
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidAnalysisDto.TotalUsedCount">
            <summary>
            Total count of used RFID tags
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidAnalysisDto.UsedRfids">
            <summary>
            List of used RFID tags with their details
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidAnalysisDto.Summary">
            <summary>
            Analysis summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UsedRfidDetailDto">
            <summary>
            DTO for individual used RFID tag details
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidDetailDto.RFIDCode">
            <summary>
            RFID tag code
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidDetailDto.EPCValue">
            <summary>
            EPC value of the RFID tag
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidDetailDto.ProductId">
            <summary>
            Product ID this RFID is assigned to
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidDetailDto.AssignedOn">
            <summary>
            When the RFID was assigned to the product
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UsedRfidDetailDto.ProductInfo">
            <summary>
            Product details (if available)
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UnusedRfidAnalysisDto">
            <summary>
            DTO for unused RFID tag analysis - includes count and detailed RFID information
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidAnalysisDto.TotalUnusedCount">
            <summary>
            Total count of unused RFID tags
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidAnalysisDto.UnusedRfids">
            <summary>
            List of unused RFID tags with their details
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidAnalysisDto.Summary">
            <summary>
            Analysis summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UnusedRfidDetailDto">
            <summary>
            DTO for individual unused RFID tag details
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidDetailDto.RFIDCode">
            <summary>
            RFID tag code
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidDetailDto.EPCValue">
            <summary>
            EPC value of the RFID tag
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidDetailDto.CreatedOn">
            <summary>
            When the RFID was created
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UnusedRfidDetailDto.IsActive">
            <summary>
            Whether the RFID is active
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidScanRequestDto">
            <summary>
            DTO for RFID scan request - user provides EPC value to scan
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanRequestDto.EpcValue">
            <summary>
            Single EPC value to scan for (for backward compatibility)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanRequestDto.EpcValues">
            <summary>
            Multiple EPC values to scan for (new feature)
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidScanResponseDto">
            <summary>
            DTO for RFID scan response - returns all products associated with scanned EPC values
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanResponseDto.Success">
            <summary>
            Whether the scan was successful
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanResponseDto.Message">
            <summary>
            Message describing the scan result
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanResponseDto.TotalProductsFound">
            <summary>
            Total number of products found
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanResponseDto.ScanResults">
            <summary>
            List of scanned products grouped by EPC value
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidScanResponseDto.UnmatchedEpcValues">
            <summary>
            EPC values that were scanned but found no products
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.EpcScanResultDto">
            <summary>
            DTO for individual EPC scan result
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.EpcScanResultDto.EpcValue">
            <summary>
            The EPC value that was scanned
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.EpcScanResultDto.RfidCode">
            <summary>
            RFID code associated with this EPC value
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.EpcScanResultDto.ProductCount">
            <summary>
            Number of products found for this EPC value
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.EpcScanResultDto.Products">
            <summary>
            List of products associated with this EPC value
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ScannedProductDto">
            <summary>
            DTO for individual product found during RFID scan
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.ProductId">
            <summary>
            Product ID
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.ItemCode">
            <summary>
            Product item code
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.RFIDCode">
            <summary>
            RFID code assigned to this product
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.EPCValue">
            <summary>
            EPC value of the RFID tag
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.AssignedOn">
            <summary>
            When the RFID was assigned to this product
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.Status">
            <summary>
            Product status
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.CategoryName">
            <summary>
            Product category name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.ProductName">
            <summary>
            Product name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.DesignName">
            <summary>
            Design name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.PurityName">
            <summary>
            Purity name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.BranchName">
            <summary>
            Branch name where product is located
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.CounterName">
            <summary>
            Counter name where product is located
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.GrossWeight">
            <summary>
            Gross weight
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.NetWeight">
            <summary>
            Net weight
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.StoneWeight">
            <summary>
            Stone weight
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.DiamondHeight">
            <summary>
            Diamond height
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.BoxDetails">
            <summary>
            Box details
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.Size">
            <summary>
            Product size
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.StoneAmount">
            <summary>
            Stone amount
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.DiamondAmount">
            <summary>
            Diamond amount
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.HallmarkAmount">
            <summary>
            Hallmark amount
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.MakingPerGram">
            <summary>
            Making charge per gram
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.MakingPercentage">
            <summary>
            Making charge percentage
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.MakingFixedAmount">
            <summary>
            Fixed making charge amount
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.Mrp">
            <summary>
            MRP (Maximum Retail Price)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.ScannedProductDto.ImageUrl">
            <summary>
            Product image URL
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidExcelUploadDto">
            <summary>
            DTO for RFID Excel upload request
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadDto.ExcelFile">
            <summary>
            Excel file containing RFID data
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadDto.ClientCode">
            <summary>
            Client code for the upload (optional, will be extracted from token if not provided)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadDto.UpdateExisting">
            <summary>
            Whether to update existing RFID codes with new EPC values
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadDto.CreateNew">
            <summary>
            Whether to create new RFID codes if they don't exist
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidExcelRowDto">
            <summary>
            DTO for individual RFID data from Excel
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelRowDto.RFIDCode">
            <summary>
            RFID Code from Excel column 1
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelRowDto.EPCValue">
            <summary>
            EPC Value from Excel column 2
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RfidExcelUploadResponseDto">
            <summary>
            DTO for RFID Excel upload response
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.TotalRowsProcessed">
            <summary>
            Total rows processed
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.NewRfidsCreated">
            <summary>
            Number of new RFID codes created
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.ExistingRfidsUpdated">
            <summary>
            Number of existing RFID codes updated
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.ErrorRows">
            <summary>
            Number of rows with errors
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.Errors">
            <summary>
            List of errors encountered during processing
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.ProcessedRows">
            <summary>
            List of successfully processed rows
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.RfidExcelUploadResponseDto.Summary">
            <summary>
            Summary message
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateStockTransferDto">
            <summary>
            DTO for creating a new stock transfer
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkStockTransferDto">
            <summary>
            DTO for bulk stock transfers
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UpdateTransferStatusDto">
            <summary>
            DTO for updating transfer status
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ApproveTransferDto">
            <summary>
            DTO for transfer approval
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.RejectTransferDto">
            <summary>
            DTO for transfer rejection
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.TransferFilterDto">
            <summary>
            DTO for transfer filters
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockTransferResponseDto">
            <summary>
            DTO for stock transfer response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.LocationInfo">
            <summary>
            DTO for location information
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.ProductInfo">
            <summary>
            DTO for product information in transfer
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkTransferResponseDto">
            <summary>
            DTO for bulk transfer response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.TransferSummaryDto">
            <summary>
            DTO for transfer summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.TransferTypeSummary">
            <summary>
            DTO for transfer type summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BranchTransferSummary">
            <summary>
            DTO for branch transfer summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.TransferTypes">
            <summary>
            Transfer types
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.TransferStatuses">
            <summary>
            Transfer statuses
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateStockVerificationDto">
            <summary>
            DTO for creating a new stock verification session
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.SubmitStockVerificationDto">
            <summary>
            DTO for submitting scanned items for verification
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationResponseDto">
            <summary>
            DTO for stock verification response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationDto">
            <summary>
            DTO for stock verification details
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationDetailDto">
            <summary>
            DTO for individual verification detail
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationSummaryDto">
            <summary>
            DTO for stock verification summary
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationReportFilterDto">
            <summary>
            DTO for stock verification report filter
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.StockVerificationReportResponseDto">
            <summary>
            DTO for stock verification report response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.DateWiseStockVerificationReportDto">
            <summary>
            DTO for date-wise stock verification report
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserDto">
            <summary>
            User data transfer object for API responses
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.UserId">
            <summary>
            Unique identifier for the user
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.UserName">
            <summary>
            Username for login
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.Email">
            <summary>
            Email address (unique)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.FullName">
            <summary>
            Full name of the user
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.MobileNumber">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.FaxNumber">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.City">
            <summary>
            City where the user is located
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.Address">
            <summary>
            Physical address
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.OrganisationName">
            <summary>
            Organization/company name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.ShowroomType">
            <summary>
            Type of showroom (e.g., Premium, Standard)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.ClientCode">
            <summary>
            Unique client code (e.g., LS0001)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.DatabaseName">
            <summary>
            Database name for the client
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.ConnectionString">
            <summary>
            Connection string for the client database
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.IsAdmin">
            <summary>
            Whether the user is an admin
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.UserType">
            <summary>
            User type (MainAdmin, Admin, User)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.AdminUserId">
            <summary>
            ID of the admin user who created this user (null for main admin)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.IsActive">
            <summary>
            Whether the user is active
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.CreatedOn">
            <summary>
            When the user was created
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UserDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateUserDto">
            <summary>
            Data transfer object for creating a new user
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.UserName">
            <summary>
            Username for login (required)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.Email">
            <summary>
            Email address (required, unique)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.Password">
            <summary>
            Password (required)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.FullName">
            <summary>
            Full name of the user
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.MobileNumber">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.FaxNumber">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.City">
            <summary>
            City where the user is located
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.Address">
            <summary>
            Physical address
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.OrganisationName">
            <summary>
            Organization/company name (required)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.CreateUserDto.ShowroomType">
            <summary>
            Type of showroom (e.g., Premium, Standard)
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UpdateUserDto">
            <summary>
            Data transfer object for updating user information
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.FullName">
            <summary>
            Full name of the user
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.MobileNumber">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.FaxNumber">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.City">
            <summary>
            City where the user is located
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.Address">
            <summary>
            Physical address
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.OrganisationName">
            <summary>
            Organization/company name
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.ShowroomType">
            <summary>
            Type of showroom (e.g., Premium, Standard)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.UpdateUserDto.IsActive">
            <summary>
            Whether the user is active
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.LoginDto">
            <summary>
            Data transfer object for user login
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.LoginDto.Email">
            <summary>
            Email address (required)
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.LoginDto.Password">
            <summary>
            Password (required)
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.LoginResponseDto">
            <summary>
            Data transfer object for login response
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.LoginResponseDto.Token">
            <summary>
            JWT authentication token
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.LoginResponseDto.User">
            <summary>
            User information
            </summary>
        </member>
        <member name="P:RfidAppApi.DTOs.LoginResponseDto.ExpiresAt">
            <summary>
            When the token expires
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserFriendlyCreateProductDto">
            <summary>
            User-friendly DTO for creating products with text-based master data
            Users can simply enter text values like "Gold", "Pune", "Counter1" instead of knowing IDs
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserFriendlyUpdateProductDto">
            <summary>
            User-friendly DTO for updating products
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UserFriendlyProductResponseDto">
            <summary>
            Response DTO for user-friendly product operations
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkCreateProductsDto">
            <summary>
            DTO for bulk product creation with user-friendly inputs
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.BulkProductResponseDto">
            <summary>
            Response for bulk operations
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.CreateInvoiceDto">
            <summary>
            DTO for creating invoice
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.UpdateInvoiceDto">
            <summary>
            DTO for updating invoice
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.InvoiceResponseDto">
            <summary>
            DTO for invoice response
            </summary>
        </member>
        <member name="T:RfidAppApi.DTOs.InvoiceStatisticsDto">
            <summary>
            DTO for invoice statistics
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.BoxMaster">
            <summary>
            Master table for jewelry box types and specifications
            Examples: "Premium Wooden Box", "Velvet Case", "Gift Box", "Travel Case"
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.DailyStockBalance">
            <summary>
            Model for tracking daily opening and closing stock balances
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.Invoice">
            <summary>
            Model for storing invoice information in client database
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.ProductImage">
            <summary>
            Model for storing product images in client database
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.StockMovement">
            <summary>
            Model for tracking all stock movements (additions, sales, returns, transfers)
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.StockTransfer">
            <summary>
            Model for tracking stock transfers between branches, counters, and boxes
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.StockVerification">
            <summary>
            Model for tracking stock verification sessions and results
            </summary>
        </member>
        <member name="T:RfidAppApi.Models.StockVerificationDetail">
            <summary>
            Model for individual items in a stock verification session
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.MigrateClientDatabaseAsync(System.String)">
            <summary>
            Comprehensive migration for a single client database
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.MigrateAllClientDatabasesAsync">
            <summary>
            Migrate all client databases with comprehensive table creation
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.EnsureAllRequiredTablesExistAsync(System.String,System.String)">
            <summary>
            Ensure all required tables exist in the client database
            Returns the number of tables created
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.CreateTableAsync(System.String,System.String,System.String)">
            <summary>
            Create a specific table based on table name
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.GetStockMovementTableSql">
            <summary>
            Get SQL for creating StockMovement table
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.GetDailyStockBalanceTableSql">
            <summary>
            Get SQL for creating DailyStockBalance table
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.GetProductImageTableSql">
            <summary>
            Get SQL for creating ProductImage table
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.TableExistsAsync(System.String,System.String)">
            <summary>
            Check if a table exists in the database
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.IsDatabaseUpToDateAsync(System.String)">
            <summary>
            Check if database is up to date
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.DatabaseMigrationService.GetPendingMigrationsAsync(System.String)">
            <summary>
            Get pending migrations for a client
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IClientDatabaseService.GenerateClientCodeAsync">
            <summary>
            Generates the next sequential client code (LS0001, LS0002, etc.)
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IClientDatabaseService.CreateClientDatabaseAsync(System.String,System.String)">
            <summary>
            Creates a new client database with the given organization name and client code
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IClientDatabaseService.ClientDatabaseExistsAsync(System.String)">
            <summary>
            Checks if a client database exists for the given client code
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IClientDatabaseService.GetClientConnectionStringAsync(System.String)">
            <summary>
            Gets the connection string for a client database
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IClientDatabaseService.GetAllClientCodesAsync">
            <summary>
            Gets all client codes from the master database
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IDatabaseMigrationService.AddProductImageTableToClientAsync(System.String)">
            <summary>
            Add ProductImage table to existing client databases
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IDatabaseMigrationService.AddProductImageTableToAllClientsAsync">
            <summary>
            Add ProductImage table to all existing client databases
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IDatabaseMigrationService.AddReportingTablesToClientAsync(System.String)">
            <summary>
            Add reporting tables to existing client database
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IDatabaseMigrationService.AddReportingTablesToAllClientsAsync">
            <summary>
            Add reporting tables to all existing client databases
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.InvoiceService.GetInvoicesByCustomerAsync(System.String,System.String)">
            <summary>
            Get invoices by customer name (partial match)
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.InvoiceService.GetInvoicesByPaymentMethodAsync(System.String,System.String)">
            <summary>
            Get invoices by payment method
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.InvoiceService.GetInvoiceByNumberAsync(System.String,System.String)">
            <summary>
            Get invoice by invoice number
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.InvoiceService.GetInvoiceCountByStatusAsync(System.String)">
            <summary>
            Get invoice count by status
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.InvoiceCountDto">
            <summary>
            DTO for invoice count by status
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.IReportingService">
            <summary>
            Interface for comprehensive reporting service
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.IRfidExcelService">
            <summary>
            Service interface for RFID Excel operations
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IRfidExcelService.UploadRfidFromExcelAsync(RfidAppApi.DTOs.RfidExcelUploadDto,System.String)">
            <summary>
            Upload RFID data from Excel file
            </summary>
            <param name="uploadDto">Upload request containing Excel file and options</param>
            <param name="clientCode">Client code for the operation</param>
            <returns>Upload response with processing results</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidExcelService.ProcessRfidRowsAsync(System.Collections.Generic.List{RfidAppApi.DTOs.RfidExcelRowDto},System.String,System.Boolean,System.Boolean)">
            <summary>
            Process RFID data from Excel rows
            </summary>
            <param name="rfidRows">List of RFID data from Excel</param>
            <param name="clientCode">Client code for the operation</param>
            <param name="updateExisting">Whether to update existing RFID codes</param>
            <param name="createNew">Whether to create new RFID codes</param>
            <returns>Processing results</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidExcelService.ValidateRfidDataAsync(System.Collections.Generic.List{RfidAppApi.DTOs.RfidExcelRowDto})">
            <summary>
            Validate RFID data from Excel
            </summary>
            <param name="rfidRows">List of RFID data to validate</param>
            <returns>Validation results with any errors</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidExcelService.GenerateExcelTemplateAsync">
            <summary>
            Generate sample Excel template for RFID upload
            </summary>
            <returns>Excel file as byte array</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidService.GetUsedRfidAnalysisAsync(System.String)">
            <summary>
            Get detailed analysis of used RFID tags (assigned to products) for a client
            </summary>
            <param name="clientCode">Client code to analyze</param>
            <returns>Used RFID analysis with count and detailed information</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidService.GetUnusedRfidAnalysisAsync(System.String)">
            <summary>
            Get detailed analysis of unused RFID tags (not assigned to products) for a client
            </summary>
            <param name="clientCode">Client code to analyze</param>
            <returns>Unused RFID analysis with count and detailed information</returns>
        </member>
        <member name="M:RfidAppApi.Services.IRfidService.ScanProductsByEpcValueAsync(RfidAppApi.DTOs.RfidScanRequestDto,System.String)">
            <summary>
            Scan for products by EPC value - returns all products associated with the scanned EPC value(s)
            </summary>
            <param name="request">Scan request containing single EPC value or multiple EPC values</param>
            <param name="clientCode">Client code to search in</param>
            <returns>Scan response with all associated products grouped by EPC value</returns>
        </member>
        <member name="T:RfidAppApi.Services.IStockTransferService">
            <summary>
            Interface for stock transfer operations
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.CreateTransferAsync(RfidAppApi.DTOs.CreateStockTransferDto,System.String)">
            <summary>
            Create a new stock transfer
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.CreateBulkTransfersAsync(RfidAppApi.DTOs.BulkStockTransferDto,System.String)">
            <summary>
            Create multiple stock transfers in bulk
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetTransferAsync(System.Int32,System.String)">
            <summary>
            Get a specific transfer by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetTransfersAsync(RfidAppApi.DTOs.TransferFilterDto,System.String)">
            <summary>
            Get all transfers with optional filtering
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.UpdateTransferStatusAsync(System.Int32,RfidAppApi.DTOs.UpdateTransferStatusDto,System.String)">
            <summary>
            Update transfer status
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.ApproveTransferAsync(System.Int32,RfidAppApi.DTOs.ApproveTransferDto,System.String)">
            <summary>
            Approve a transfer
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.RejectTransferAsync(System.Int32,RfidAppApi.DTOs.RejectTransferDto,System.String)">
            <summary>
            Reject a transfer
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.CompleteTransferAsync(System.Int32,System.String,System.String)">
            <summary>
            Complete a transfer (move product to destination)
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.CancelTransferAsync(System.Int32,System.String,System.String)">
            <summary>
            Cancel a transfer
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetTransferSummaryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get transfer summary and statistics
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetTransfersByProductAsync(System.Int32,System.String)">
            <summary>
            Get transfers by product
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetTransfersByRfidAsync(System.String,System.String)">
            <summary>
            Get transfers by RFID
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetPendingTransfersByLocationAsync(System.Int32,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Get pending transfers for a specific location
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.ValidateTransferAsync(RfidAppApi.DTOs.CreateStockTransferDto,System.String)">
            <summary>
            Validate if a transfer is possible
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockTransferService.GetProductTransferHistoryAsync(System.Int32,System.String)">
            <summary>
            Get transfer history for a product
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.IStockVerificationService">
            <summary>
            Interface for stock verification service
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.CreateStockVerificationAsync(RfidAppApi.DTOs.CreateStockVerificationDto,System.String)">
            <summary>
            Create a new stock verification session
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.SubmitStockVerificationAsync(RfidAppApi.DTOs.SubmitStockVerificationDto,System.String)">
            <summary>
            Submit scanned items for verification (matched and unmatched)
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.GetStockVerificationByIdAsync(System.Int32,System.String)">
            <summary>
            Get stock verification by ID
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.GetStockVerificationsAsync(RfidAppApi.DTOs.StockVerificationReportFilterDto,System.String)">
            <summary>
            Get all stock verifications with filters
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.GetStockVerificationSummaryAsync(System.String)">
            <summary>
            Get stock verification summary
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.GetDateWiseStockVerificationReportAsync(System.DateTime,System.DateTime,System.String)">
            <summary>
            Get date-wise stock verification report
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.CompleteStockVerificationAsync(System.Int32,System.String)">
            <summary>
            Complete a stock verification session
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.CancelStockVerificationAsync(System.Int32,System.String)">
            <summary>
            Cancel a stock verification session
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.IStockVerificationService.GetVerificationDetailsByStatusAsync(System.Int32,System.String,System.String)">
            <summary>
            Get stock verification details by status (matched, unmatched, missing)
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.ReportingService">
            <summary>
            Comprehensive reporting service for stock tracking, sales reporting, and daily balances
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.RfidExcelService">
            <summary>
            Service for RFID Excel operations including upload, processing, and template generation
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.UploadRfidFromExcelAsync(RfidAppApi.DTOs.RfidExcelUploadDto,System.String)">
            <summary>
            Upload RFID data from Excel file
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.ProcessRfidRowsAsync(System.Collections.Generic.List{RfidAppApi.DTOs.RfidExcelRowDto},System.String,System.Boolean,System.Boolean)">
            <summary>
            Process RFID data from Excel rows
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.ValidateRfidDataAsync(System.Collections.Generic.List{RfidAppApi.DTOs.RfidExcelRowDto})">
            <summary>
            Validate RFID data from Excel
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.GenerateExcelTemplateAsync">
            <summary>
            Generate sample Excel template for RFID upload
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.ReadExcelFileAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Read Excel file and extract RFID data
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.RfidExcelService.GenerateSummary(RfidAppApi.DTOs.RfidExcelUploadResponseDto)">
            <summary>
            Generate summary message for the response
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.StockTransferService">
            <summary>
            Service for managing stock transfers between branches, counters, and boxes
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.StockVerificationService">
            <summary>
            Service for managing stock verification sessions and reports
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.CreateBulkProductsAsync(RfidAppApi.DTOs.BulkCreateProductsDto,System.String)">
            <summary>
            HIGHLY OPTIMIZED bulk product creation for large datasets (20k+ products)
            Implements batch processing, master data caching, and bulk database operations
            Expected performance: 20k products in 2-5 minutes instead of 14+ minutes
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.PreloadMasterDataAsync(RfidAppApi.Data.ClientDbContext,System.Collections.Generic.List{RfidAppApi.DTOs.UserFriendlyCreateProductDto},System.String)">
            <summary>
            Pre-loads all master data into memory to avoid repeated database calls
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.ValidateBulkProductsAsync(RfidAppApi.Data.ClientDbContext,System.Collections.Generic.List{RfidAppApi.DTOs.UserFriendlyCreateProductDto},RfidAppApi.Services.MasterDataCache)">
            <summary>
            Validates all products before processing to fail fast
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.ValidateMasterDataAvailability(System.Collections.Generic.List{RfidAppApi.DTOs.UserFriendlyCreateProductDto},RfidAppApi.Services.MasterDataCache)">
            <summary>
            Validates that all required master data is available in the cache
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.ProcessProductBatchAsync(RfidAppApi.Data.ClientDbContext,System.Collections.Generic.List{RfidAppApi.DTOs.UserFriendlyCreateProductDto},RfidAppApi.Services.MasterDataCache,System.String)">
            <summary>
            Processes a batch of products efficiently
            </summary>
        </member>
        <member name="M:RfidAppApi.Services.UserFriendlyProductService.CreateAllMissingMasterDataAsync(RfidAppApi.Data.ClientDbContext,System.Collections.Generic.List{RfidAppApi.DTOs.UserFriendlyCreateProductDto},RfidAppApi.Services.MasterDataCache,System.String)">
            <summary>
            Creates all missing master data upfront to prevent batch conflicts
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.MasterDataCache">
            <summary>
            Cache for master data to avoid repeated database calls during bulk operations
            </summary>
        </member>
        <member name="T:RfidAppApi.Services.ValidationResult">
            <summary>
            Result of bulk validation
            </summary>
        </member>
    </members>
</doc>
